# prepare template server which contains
# ubuntuserver + jdk8 + spring-rest-api app

server_name='product-service'
resource_group='template'

az vm create \
    --resource-group $resource_group \
    --name $server_name \
    --image UbuntuLTS \
    --admin-username ubuntu \
    --ssh-key-value azure.pem.pub

# add a separate disk for data 
# you get a correlation error, if you run this script more than one. So, clear `--new` or change `--disk` name
# az disk list -g template --query '[].creationData.imageReference.id' -o tsv
# az vm disk attach \
#     --resource-group $resource_group \
#     --vm-name $server_name \
#     --disk data-disk \
#     --sku Premium_LRS \
#     --new

# then u have to format and mount the data-disk to be able to use !!

# open ports
az vm open-port --port 8080 --resource-group $resource_group --name $server_name

# you can use cloud-init or below run-command
# use `sudo find / -name git-sandbox` for git-sandbox path. which is `/var/lib/waagent/run-command/download/0/git-sandbox`
# for run-command:
#    - this run-command method works well in `az vm create`, 
#      but not works as expected in `az vmss create` (produces folder permission error)
#    - the other issue is, you have to start your script at boot !
# so, cloud-init is much less time consuming. That's why i switched.
# The other option is, (if your images are less and not changing to much)
#    - automatically prepare less changing parts
#    - and, manually prepare more changing parts of your image such as `git clone` and `./gradlew bootRun` parts.
#    - you have to start your script at boot !
# 
az vm run-command invoke \
    -g $resource_group \
    -n $server_name \
    --command-id RunShellScript --scripts "sudo apt update && sudo apt install -y openjdk-8-jdk && git clone https://github.com/tansudasli/git-sandbox.git && cp -R ./git-sandbox /home/ubuntu/ && chown -R ubuntu:ubuntu /home/ubuntu/git-sandbox && cd /home/ubuntu/git-sandbox && ./gradlew bootRun"


# test rest-api
ip_addr=$(az vm show -d -g $resource_group -n $server_name --query publicIps -o tsv)
echo $ip_addr

curl $ip_addr:8080

#connect to instance via ssh -i, and enter .pem file password
# ssh -i azure.pem ubuntu@`az vm show -d -g template -n product-service --query publicIps -o tsv`